#+TITLE:     LSST CCD Acceptance Testing File Schema
#+AUTHOR:    Brett Viren
#+EMAIL:     bv@bnl.gov
#+DATE:      \today

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:   hyperindex=true,
#+LATEX_HEADER:   plainpages=false,
#+LATEX_HEADER:   colorlinks=true,
#+LATEX_HEADER:   linkcolor=black
#+LATEX_HEADER: }

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

## http://lists.netisland.net/archives/plug/plug-2011-11/msg00088.html
#+LaTeX_HEADER:\usepackage[margin=0.75in]{geometry}


#+BEGIN_ABSTRACT
The format for the files to exchange results from LSST CCD acceptance
testing stations to the back-end database system is described.  Python
modules for producing and validating files for compliance is
presented.  (FIXME: this is still a draft in progress.)
#+END_ABSTRACT


* Overview

The LSST CCD acceptance tests consist of several stations each
evaluating some aspect of the CCDs.  These tests run on a
heterogeneous set of platforms.  Results of these test are considered
to be separated into two forms.  Part is a result summary suitable for
storing in a database for later searching and report building.  The
rest is considered ancillary and to be used for any post-testing
detailed studies.  It is the summary results that this document
addresses.

To handle transferring summary information from a variety of sources
into the database requires that the data be well formed and satisfy
all the technical requirements needed for database access.  Direct
database access by each test station would require many custom
solutions.  Instead, an exchange file is produced in a format that all
stations should be able to write.  In order to reduce complexity in
the database ingest application, these files are required to follow a
well defined format and schema.  It must be possible to validate these
interchange files against their schema before ingesting to avoid
polluting the database with wrong or inconsistent values.

Besides the summary results themselves, this interchange file should
encapsulate any important meta-data about the test, such as the
version of the test software, as well as provide a means to reference
the ancillary results.

The FITS file format is used for these interchange files.  FITS is a
natural choice in that it is general purpose but with specific
features needed by the tests (in particular storage of bitmapped
images).  It is also commonly used in astrophysics applications and
well supported on the variety of test station platforms.

#+caption: Overview of the acceptance testing result data handling.
#+label: fig:overview
[[./overview.pdf]]

Figure \ref{fig:overview} shows a cartoon of the handling of the
result data from the test stations.  A station checks out its software
and records the corresponding commit identifier (GIT SHA1 digest
hash).  Runs the test and produces a FITS summary file in the
interchange format described here and potentially additional ancillary
files.  The commit identifier, references to teh ancillary files and
the summary results themselves are written to the FITS summary file.
When a FITS summary file is available an external process validates is
and, if it passes, updates the database with the results.  If
validation fails the overall controlling process (not shown) is
notified.  Later, reports and additional post-test analysis can be
performed by making queries to the database.  
 
The rest of this document describes the file schema, that is how these
FITS interchange files must organize their contents.

* Overview of the Schema

The organization and conventions for the contents of the interchange
files are described in this section.

** Hierarchy

The layout of the contents is organized into a hierarchy.  This
hierarchy can be thought of as a set of nested and ordered lists.

 - /result/ :: \to (/PrimaryHDU/, /FragmentHDU/, ...)
 - /PrimaryHDU/ :: \to /HDU/
 - /FragmentHDU/ :: \to /HDU/
 - /HDU/ :: \to (/header/, /payload/)
 - /payload/ :: \to either a /table/ or /data/
 - /header/ :: \to (/card/, /card/, ...)
 - /table/ :: \to (/column/, /column/, ...)
 - /data/ :: \to (t.b.d.)
 - /card/ :: \to (/name/, /typeobj/, /comment/, /description/)
 - /column/ :: \to (/name/, /typeobj/, /description/)
 - /name/ :: \to a string, 8 characters or less
 - /typeobj/ :: \to an instance of a Python class representing the type of the element
 - /comment/ :: \to a short FITS comment
 - /description/ :: \to a free form, comprehensive description of the element

** Conventions
 
The content of each level of this hierarchy must follow certain
conventions.  The important ones are described below.

*** Header Data Unit

All header data units (/PrimaryHDU/ or /FragmentHDU/) must contain a
header unit an optional payload unit.  If there is no payload, this
second unit is represented by Python's None object.

*** Header Unit

All header units must contains the following cards:

 - =EXTNAME= :: Standard naming mechanism for a FITS HDU, when in the
                primary HDU it holds the canonical name for the test
                and determines which named, secondary HDUs are
                expected.  Test names are documented below in the
                test-specific schema section.
 - =CHECKSUM= :: Standard FITS check sum card.
 - =DATASUM= :: Standard FITS data sum card, will be '0' if thee is no payload.
 - =SCHEMAV= :: Version of the schema used in this HDU.

The header of the FITS primary HDU must contain these additional cards:

 - =DATE-OBS= :: The date that the test was performed in
                 =YYYY-MM-DDTHH:MM:SS= format, UTC.
 - =COMMIT= :: The SHA1 digest hash (in hex) for the commit that
               provides the code that produced this result.

Secondary HDU headers contain any result fragment specific cards as
detailed in the schema itself.

*** Type Objects

Cards and Columns must specify their type with an instance of a Python
class.  Classes from the =numpy= module are preferred.

* Schema Definition

The schema is defined as a Python data structure the parallels the
hierarchy, encodes the conventions listed above and lists the specific
entries that each concrete element will provide.


* Test-specific Schema

Each test result file must implement the above FITS primary HDU.  In
addition, each test must provide one or more secondary FITS HDUs.  The
number and schema of these secondaries are specific to the result of
each station.  Each test must follow its schema to produce a valid
file.  The schema to apply is determined by the value of the
=TESTNAME= card in the primary HDU.

The schema of each test result is outlined below however the
definitive descriptions are in the =lcatr.schema= Python module, also
described below.

** Gain, Noise and Cold Spots

This test has the canonical name of =GainNoiseColdSpots= and provides
four secondary HDUs with the following =EXTNAME= card value:

 - =ANAFILES= :: names of files used to produced these results
 - =GAINS= :: measured gains
 - =NOISE= :: measured noise
 - =COLDSPOT= :: regions identified as having unacceptable response

The schema of each of these secondary HDUs is described in the
sections below.

*** =ANAFILES= HDU 

The =ANAFILES= HDU holds a two-column table of file names and the SHA1
digest of their contents.  The file names are limited to 64
characters.  (FIXME: is this a necessary limitation?)

*** =GAINS= HDU

The =GAINS= HDU holds the gains of each amplifier measured with two
methods.  Each are stored as columns in a table with one row per
amplifier.  (FIXME: currently the column order implies amplifier
number, should it be more explicit?)  Two methods are stored:
=LinGain= measure by a linear fit and =MedGain= from the median.

*** =NOISE= HDU

The =NOISE= HDU contains measurements of the noise level of each
amplifier measured by over scan (=OvScNois=) and standard deviation
(=SdevNois=) and stored as columns in table, one row per amplifier.
(FIXME: same question as above).

*** =COLDSPOT= HDU

The =COLDSPOT= HDU holds a table of any areas (spots) on the CCD that
have below acceptable response.  A spot is described as an amplifier
number, the number of pixels with low response and the x,y pixel
number representing its center.  Each of these quantities are stored
as a column in the table.


* Support Code

A number of Python modules exist to support producing and validating
files that comply with this document in the =lcatr= (LSST CCD
Acceptance Test Results) module.  Each high-level module is described:


** Schema Representation

The =lcatr.schema= module provides the definitive description of
acceptable results files.  The description is in the form of a
hierarchy built from Python tuples.

*** Top level

At top level the schema for each type of result is described by an
ordered list of per-HDU descriptions.  The first element is for the
FITS Primary HDU and subsequent ones are for the result-specific HDUs.

#+begin_src python
(PrimaryHDU, Station1Result1HDU, Station1Result2HDU, ...)
#+end_src

*** HDU

Each HDU is described by a triple.  The first item is the canonical
name for the HDU.  For the FITS primary HDU the name must be the
canonical name for the result as a whole (ie, the name for the test
station).  The second describes the FITS cards specific to the HDU's
header unit and the third describes the data/table unit.

#+begin_src python
(HeaderDesc, TableOrDataDesc)
#+end_src

*** Header Unit

The HeaderDesc is a list of CardDesc:

#+begin_src python
(Card1Desc, Card2Desc, ...)
#+end_src

Each HDU-specific FITS card is described with an ordered tuple of

 - name :: the name of the card as a string, 8 characters or less
 - type :: the type of the card as a Python class object
 - comment :: brief description used as a FITS comment
 - description :: longer, free-form human-oriented text describing the card for generated documentation.

In addition to any HDU-specific cards, every header must contain these
standard cards:

 - =EXTNAME= :: The canonical name of the HDU.  In the case of the
                FITS primary HDU this is the canonical name for the
                result as a whole (ie, the name of the test station).
 - =SCHEMAV= :: An integer representing what version of the schema the
                HDU was written with.
 - =CHECKSUM= :: standard FITS checksum 
 - =DATASUM= :: standard FITS datasum ('0' when if no data/table unit)

In addition, every header must have a =EXTNAME= to name the header but
this is specified at the HDU level (see above).  There may be other
book keeping cards placed to manage the table/data unit.  They are not
explicitly specified in this schema.

*** Table Unit

Tables are defined as a list of columns.  Columns are specified with
the following elements:

 - name :: name of the column
 - type :: the type of the column as a Python class object


** FITS File Creation

The =lcatr.results= module provides Python code to create compliant
files.  Stations that use this module to produce their result files
will guarantee that their files are acceptable for feeding to the
back-end database.  (FIXME: t.b.d)


** FITS File Validation

The =lcatr.validation= module provides Python code to validate
existing FITS files for compliance.  Stations that can not use
=lcatr.results= to produce their files can use this module to validate
that their result files will be accepted by the back-end database.
(FIXME: t.d.b.)


** Installation Requirements

 - pyfits :: Python-FITS interface


** Example use

(FIXME: t.b.d.)
